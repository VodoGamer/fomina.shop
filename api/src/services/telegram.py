from uuid import UUID

from telegrinder import API, Token

from src.database.models import PaymentStatus
from src.database.repository import DatabaseRepository
from src.env import TELEGRAM_ADMIN_IDS, TELEGRAM_TOKEN

api = API(Token(TELEGRAM_TOKEN))


async def send_notification_to_admins(message: str) -> None:
    for admin_id in TELEGRAM_ADMIN_IDS:
        print((await api.send_message(admin_id, message)).unwrap())


async def get_notification_text(payment_id: UUID) -> str:
    payment = await DatabaseRepository().payment.get_by_id(payment_id)
    if not payment:
        await send_notification_to_admins("–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–∞")
        raise ValueError
    order = await DatabaseRepository().order.get_by_id(payment.order_id)
    if not order:
        raise ValueError
    products = await DatabaseRepository().order_association.get_products_by_order(payment.order_id)
    variations = await DatabaseRepository().order_association.get_variations_by_order(
        payment.order_id
    )
    products_str = "\n".join(
        [
            f"‚Äî {product.title} {product.price + variations[index].price_markup}‚ÇΩ "
            f"[{variations[index].key.value} - {variations[index].value}]"
            for index, product in enumerate(products)
        ]
    )
    payment_status_to_str = {
        PaymentStatus.succeeded: "–æ–ø–ª–∞—á–µ–Ω–æ‚úÖ",
        PaymentStatus.canceled: "–æ—Ç–º–µ–Ω–µ–Ω–æ‚ùå",
        PaymentStatus.waiting_for_capture: "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ãüïê",
        PaymentStatus.pending: "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ãüïê",
    }
    return (
        f"–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{payment.order_id}!\n\n–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: "
        f"{payment_status_to_str[payment.status]}\n–°—É–º–º–∞: {payment.price}"
        f"‚ÇΩ\n\n–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{products_str}\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑—á–∏–∫–µ:\n"
        f"–ò–º—è - {order.name}\n–ê–¥—Ä–µ—Å - {order.address}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω - {order.phone_number}\n–ü–æ—á—Ç–∞ - {order.email}"
    )
